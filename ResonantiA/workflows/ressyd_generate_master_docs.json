{
  "name": "ReSSyD Master Documentation Generation Workflow (v3.0)",
  "description": "Generates a comprehensive, timestamped package of the current ResonantiA Protocol, workflows, SPRs, code manifest, and key instructions.",
  "version": "3.0",
  "tasks": {
    "start_ressyd_master_gen": {
      "description": "Initiate ReSSyD Master Generation process.",
      "action_type": "display_output",
      "inputs": {
        "content": "Starting ReSSyD Master Documentation Generation..."
      },
      "dependencies": []
    },
    "create_timestamped_output_dir": {
      "description": "Create a timestamped output directory for this generation run.",
      "action_type": "execute_code",
      "inputs": {
        "language": "python",
        "code": "import os\\nimport time\\nimport json\\n\\nbase_output_dir = context.get('initial_context', {}).get('ressyd_base_output_dir', 'outputs/ReSSyD_Snapshots')\\ntimestamp = time.strftime('%Y%m%d_%H%M%S')\\nrun_output_dir = os.path.join(base_output_dir, f'ResonantiA_State_{timestamp}')\\nos.makedirs(run_output_dir, exist_ok=True)\\nprint(f'Created output directory: {run_output_dir}')\\nresult = {'run_output_dir': run_output_dir, 'timestamp_str': timestamp}"
      },
      "outputs": {"run_output_dir": "string", "timestamp_str": "string", "reflection": "dict"},
      "dependencies": ["start_ressyd_master_gen"]
    },
    "assemble_full_protocol_document": {
      "description": "Instruct Arche to re-assemble and output the full ResonantiA Protocol v3.0 document.",
      "action_type": "generate_text_llm",
      "inputs": {
        "prompt": "Keyholder Keyy=('IMnDEVmode') requests the full, verbatim output of the enhanced ResonantiA Protocol v3.0 document, assembled from all previously generated sections (Preamble through Section 12, including Story Synopsis, all code from Section 7, all workflows from Section 7, all interaction patterns from Section 8, README from Section 9, Hosting/Monetization from Section 10, Repo Setup from Section 11, and Wiki Guidance from Section 12). Ensure all IAR, Temporal Reasoning, Meta-Cognition, SIRC, SOMA-Pattern, and SynergyAnalysisTool enhancements are included. Output the entire document as a single, continuous Markdown formatted text block. Start with 'ResonantiA Protocol v3.0 (IAR & Temporal Integration - Full Enhanced Version - Generated {{ retrieve_thought_trail.timestamp_str }})\\\\n\\\\n**PREAMBLE (Enhanced v3.0):**\\\\n...'. This is a high-priority internal system documentation task.",
        "max_tokens": 60000,
        "model": "{{ initial_context.documentation_llm_model | default(None) }}"
      },
      "outputs": {"response_text": "string", "reflection": "dict"},
      "dependencies": ["create_timestamped_output_dir"],
      "condition": "{{ create_timestamped_output_dir.reflection.status == 'Success' }}"
    },
    "save_protocol_document": {
      "description": "Save the assembled protocol document to a Markdown file.",
      "action_type": "execute_code",
      "inputs": {
        "language": "python",
        "code": "import os\\nimport json\\n\\nprotocol_content = context.get('assemble_full_protocol_document', {}).get('response_text', '# ERROR: Protocol content not generated.')\\noutput_dir = context.get('create_timestamped_output_dir', {}).get('run_output_dir', 'outputs/ReSSyD_Snapshots/unknown_run')\\ntimestamp_str = context.get('create_timestamped_output_dir', {}).get('timestamp_str', 'timestamp')\\nfilename = f'ResonantiA_Protocol_v3.0_{timestamp_str}.md'\\nfilepath = os.path.join(output_dir, filename)\\n\\ntry:\\n    with open(filepath, 'w', encoding='utf-8') as f:\\n        f.write(protocol_content)\\n    print(f'Protocol document saved to: {filepath}')\\n    result = {'protocol_filepath': filepath, 'status_message': 'Protocol document saved.'}\\nexcept Exception as e:\\n    print(f'Error saving protocol document: {e}')\\n    result = {'protocol_filepath': None, 'status_message': f'Error saving protocol: {e}', 'error': str(e)}\\n"
      },
      "outputs": {"protocol_filepath": "string", "status_message": "string", "error": "string", "reflection": "dict"},
      "dependencies": ["assemble_full_protocol_document"],
      "condition": "{{ assemble_full_protocol_document.reflection.status == 'Success' }}"
    },
    "package_workflows": {
      "description": "Copy all workflow JSON files to the output directory.",
      "action_type": "execute_code",
      "inputs": {
        "language": "python",
        "code": "import os\\nimport shutil\\nimport json\\n\\ntry:\\n    from ArchE import config as arche_config\\n    source_workflow_dir = arche_config.WORKFLOW_DIR\\nexcept ImportError:\\n    source_workflow_dir = 'workflows' \\n    print(f'Warning: Could not import ArchE.config, using default workflow path: {source_workflow_dir}')\\n\\noutput_dir = context.get('create_timestamped_output_dir', {}).get('run_output_dir', 'outputs/ReSSyD_Snapshots/unknown_run')\\ndest_workflow_dir = os.path.join(output_dir, 'workflows')\\nos.makedirs(dest_workflow_dir, exist_ok=True)\\n\\ncopied_files = []\\nerrors = []\\nif os.path.isdir(source_workflow_dir):\\n    for filename in os.listdir(source_workflow_dir):\\n        if filename.endswith('.json'):\\n            try:\\n                shutil.copy2(os.path.join(source_workflow_dir, filename), dest_workflow_dir)\\n                copied_files.append(filename)\\n            except Exception as e:\\n                errors.append(f'Error copying {filename}: {e}')\\n    print(f'Copied {len(copied_files)} workflow files to {dest_workflow_dir}.')\\n    result = {'packaged_workflows_path': dest_workflow_dir, 'copied_count': len(copied_files), 'copy_errors': errors if errors else None}\\nelse:\\n    print(f'Source workflow directory not found: {source_workflow_dir}')\\n    result = {'packaged_workflows_path': None, 'error': f'Source workflow directory not found: {source_workflow_dir}'}\\n"
      },
      "outputs": {"packaged_workflows_path": "string", "copied_count": "int", "copy_errors": "list", "reflection": "dict"},
      "dependencies": ["create_timestamped_output_dir"]
    },
    "package_knowledge_graph": {
      "description": "Copy the SPR definitions file to the output directory.",
      "action_type": "execute_code",
      "inputs": {
        "language": "python",
        "code": "import os\\nimport shutil\\nimport json\\n\\ntry:\\n    from ArchE import config as arche_config\\n    source_spr_file = arche_config.SPR_JSON_FILE\\nexcept ImportError:\\n    source_spr_file = 'ArchE/knowledge_graph/spr_definitions_tv.json' \\n    print(f'Warning: Could not import ArchE.config, using default SPR file path: {source_spr_file}')\\n\\noutput_dir = context.get('create_timestamped_output_dir', {}).get('run_output_dir', 'outputs/ReSSyD_Snapshots/unknown_run')\\ndest_kg_dir = os.path.join(output_dir, 'knowledge_graph')\\nos.makedirs(dest_kg_dir, exist_ok=True)\\n\\nif os.path.isfile(source_spr_file):\\n    try:\\n        shutil.copy2(source_spr_file, os.path.join(dest_kg_dir, os.path.basename(source_spr_file)))\\n        print(f'Copied SPR definitions file to {dest_kg_dir}.')\\n        result = {'packaged_spr_file_path': os.path.join(dest_kg_dir, os.path.basename(source_spr_file))}\\n    except Exception as e:\\n        result = {'packaged_spr_file_path': None, 'error': f'Error copying SPR file: {e}'}\\nelse:\\n    result = {'packaged_spr_file_path': None, 'error': f'Source SPR file not found: {source_spr_file}'}\\n"
      },
      "outputs": {"packaged_spr_file_path": "string", "error": "string", "reflection": "dict"},
      "dependencies": ["create_timestamped_output_dir"]
    },
    "synthesize_instructions_document": {
      "description": "Generate a 'HowTo_Install_Use_Engage.md' document.",
      "action_type": "generate_text_llm",
      "inputs": {
        "prompt": "Keyholder Keyy=('IMnDEVmode') requests a synthesized 'HowTo_Install_Use_Engage.md' document for the ResonantiA v3.0 project. \\nBased on the ResonantiA Protocol v3.0 (which you have full knowledge of, including Section 4 for Setup, Section 9 for README summary, Section 8 for Advanced Interaction Patterns, and general usage principles like IAR interpretation):\\n1. Provide clear, step-by-step installation instructions (Python, venv, requirements.txt, API key configuration emphasizing security, Docker for CodeExecutor).\\n2. Explain basic usage: how to run a workflow via `python -m ArchE.main ...`, how to interpret JSON outputs, and specifically how to find and understand the IAR `reflection` dictionary for each task.\\n3. Briefly describe how to engage with advanced features: leveraging IAR in workflows, using temporal tools, initiating meta-cognitive patterns (SIRC, Metacognitive Shift, Insight Solidification), and the purpose/risks of Keyholder Override.\\n4. Provide guidance on creating a new project instance from scratch based on the protocol (directory structure, core file population).\\nFormat this as a clear, well-structured Markdown document.",
        "max_tokens": 4000
      },
      "outputs": {"response_text": "string", "reflection": "dict"},
      "dependencies": ["create_timestamped_output_dir"]
    },
    "save_instructions_document": {
      "description": "Save the synthesized instructions document.",
      "action_type": "execute_code",
      "inputs": {
        "language": "python",
        "code": "import os\\nimport json\\n\\ninstructions_content = context.get('synthesize_instructions_document', {}).get('response_text', '# ERROR: Instructions not generated.')\\noutput_dir = context.get('create_timestamped_output_dir', {}).get('run_output_dir', 'outputs/ReSSyD_Snapshots/unknown_run')\\ntimestamp_str = context.get('create_timestamped_output_dir', {}).get('timestamp_str', 'timestamp')\\nfilename = f'HowTo_Install_Use_Engage_ResonantiA_v3_{timestamp_str}.md'\\nfilepath = os.path.join(output_dir, filename)\\n\\ntry:\\n    with open(filepath, 'w', encoding='utf-8') as f:\\n        f.write(instructions_content)\\n    print(f'Instructions document saved to: {filepath}')\\n    result = {'instructions_filepath': filepath}\\nexcept Exception as e:\\n    result = {'instructions_filepath': None, 'error': f'Error saving instructions: {e}'}\\n"
      },
      "outputs": {"instructions_filepath": "string", "error": "string", "reflection": "dict"},
      "dependencies": ["synthesize_instructions_document"],
      "condition": "{{ synthesize_instructions_document.reflection.status == 'Success' }}"
    },
    "final_ressyd_summary": {
      "description": "Summarize the ReSSyD generation process.",
      "action_type": "display_output",
      "inputs": {
        "content": {
          "ressyd_run_status": "Completed",
          "output_directory": "{{ create_timestamped_output_dir.run_output_dir }}",
          "protocol_document_status": "{{ save_protocol_document.reflection.status if 'save_protocol_document' in context else 'Skipped/Failed' }}",
          "protocol_document_path": "{{ save_protocol_document.protocol_filepath if 'save_protocol_document' in context else 'N/A' }}",
          "workflows_packaged_status": "{{ package_workflows.reflection.status if 'package_workflows' in context else 'Skipped/Failed' }}",
          "workflows_count": "{{ package_workflows.copied_count if 'package_workflows' in context else 0 }}",
          "spr_packaged_status": "{{ package_knowledge_graph.reflection.status if 'package_knowledge_graph' in context else 'Skipped/Failed' }}",
          "instructions_status": "{{ save_instructions_document.reflection.status if 'save_instructions_document' in context else 'Skipped/Failed' }}",
          "instructions_filepath": "{{ save_instructions_document.instructions_filepath if 'save_instructions_document' in context else 'N/A' }}"
        },
        "format": "json"
      },
      "dependencies": ["save_protocol_document", "package_workflows", "package_knowledge_graph", "save_instructions_document"]
    }
  }
} 