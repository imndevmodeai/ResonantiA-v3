{
  "name": "Basic Analysis Workflow (v3.0 Enhanced)",
  "description": "Performs a web search based on a user query, summarizes the results using an LLM (considering search confidence), and displays a formatted summary including IAR status.",
  "version": "3.1",
  "tasks": {
    "start_display": {
      "description": "Display the initial user query.",
      "action_type": "display_output",
      "inputs": {
        "content": "Starting Basic Analysis for query: {{ initial_context.user_query }}"
      },
      "dependencies": []
    },
    "perform_search": {
      "description": "Perform web search using the puppeteer script.",
      "action_type": "execute_code",
      "inputs": {
        "language": "bash",
        "code": "cd ResonantiA/browser_automation && node search.js --engine=duckduckgo --query='{{ initial_context.user_query }}' --output='workflow_search_results.json'"
      },
      "dependencies": [
        "start_display"
      ]
    },
    "read_search_results": {
        "description": "Read the search results from the puppeteer output file.",
        "action_type": "execute_code",
        "inputs": {
            "language": "python",
            "code": "import json; import os; results_path = 'ResonantiA/browser_automation/workflow_search_results.json';\nif os.path.exists(results_path):\n    with open(results_path, 'r') as f:\n        results = json.load(f)\n    os.environ['SEARCH_RESULTS_JSON'] = json.dumps(results)\nelse:\n    os.environ['SEARCH_RESULTS_JSON'] = '[]'"
        },
        "outputs": {
            "search_results_json": "{{ env.SEARCH_RESULTS_JSON }}"
        },
        "dependencies": ["perform_search"]
    },
    "summarize_results": {
      "description": "Summarize search results using LLM.",
      "action_type": "generate_text_llm",
      "inputs": {
        "prompt": "User Query: {{ initial_context.user_query }}\\n\\nSearch Results:\\n```json\\n{{ read_search_results.response.search_results_json }}\\n```\\n\\nPlease provide a concise summary of these search results relevant to the user query.",
        "max_tokens": 500
      },
      "outputs": {
        "response_text": "string",
        "reflection": "dict"
      },
      "dependencies": ["read_search_results"]
    },
    "display_summary": {
      "description": "Format and display the final summary.",
      "action_type": "execute_code",
      "inputs": {
        "language": "python",
        "code": "import os; print(f'''--- Analysis Summary ---\\nUser Query: {os.environ.get('USER_QUERY')}\\n\\nSummary:\\n{os.environ.get('SUMMARY_TEXT')}\\n------------------''')",
        "environment": {
          "SUMMARY_TEXT": "{{ summarize_results.response.response_text | default('Summary generation failed or skipped.') }}",
          "USER_QUERY": "{{ initial_context.user_query | default('N/A') }}"
        }
      },
      "dependencies": ["summarize_results"]
    }
  }
} 