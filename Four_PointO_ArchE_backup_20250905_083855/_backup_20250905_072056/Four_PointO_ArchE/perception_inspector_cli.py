import json
import os
import sys
from tools.perception_engine import PerceptionEngine

def inspector():
    """
    [V4.1 - UNIFIED] An interactive CLI tool to help developers find the correct selectors
    and generate configuration for the perception knowledge base.
    """
    print("--- Perception Engine Inspector CLI (Unified) ---")
    print("This tool helps you find CSS selectors and generate JSON for perception_targets.json.")

    target_url = input("Enter the full URL of the target page to inspect (e.g., https://news.ycombinator.com/): ")
    if not target_url.startswith('http'):
        print("Invalid URL. Please start with http or https.")
        return

    engine = None
    try:
        print("Initializing browser...")
        engine = PerceptionEngine(headless=False)
        engine.navigate(target_url)
        print(f"Browser navigated to {target_url}")

        config_steps = []
        while True:
            print("\nEnter a CSS selector to test, or type 'done' to finish.")
            selector = input("Selector: ")

            if selector.lower() == 'done':
                break
            if not selector:
                continue

            try:
                engine.wait_for(selector, 5)
                extracted_text = engine.extract_text(selector)
                
                print("\n--- EXTRACTION PREVIEW ---")
                print(extracted_text[:500])
                print("--------------------------")
                
                confirm = input("Was this extraction successful? (y/n): ").lower()
                if confirm == 'y':
                    action = input("What action should this be? (navigate, wait_for, extract_text): ").lower()
                    if action in ["navigate", "wait_for", "extract_text"]:
                        step = {"action": action, "selector": selector}
                        if action == 'navigate':
                           step['url'] = target_url
                        config_steps.append(step)
                        print(f"Step added: {step}")
                    else:
                        print("Invalid action.")

            except Exception as e:
                print(f"Error testing selector '{selector}': {e}")

        if config_steps:
            print("\n--- Generated JSON Configuration ---")
            print("Copy this into your perception_targets.json file:")
            
            site_key = input("Enter a unique key for this site (e.g., 'my_new_site'): ")
            task_key = input("Enter a key for this task (e.g., 'get_headlines'): ")

            final_config = {
                site_key: {
                    "name": "My New Site",
                    "description": "Configuration generated by Inspector CLI.",
                    "base_url": "https://example.com",
                    "tasks": {
                        task_key: {
                            "steps": config_steps
                        }
                    }
                }
            }
            print(json.dumps(final_config, indent=2))

    except Exception as e:
        print(f"An error occurred in the inspector: {e}")
    finally:
        if engine:
            print("Closing browser.")
            engine.close()

if __name__ == "__main__":
    sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))
    inspector()
