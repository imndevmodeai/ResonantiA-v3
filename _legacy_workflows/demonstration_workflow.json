{
    "name": "Metacognitive Control Flow Demonstration (Revised)",
    "description": "A revised workflow that uses a single Python script to demonstrate the core logic of iteration and conditional flagging, bypassing the engine's templating limitations.",
    "tasks": {
        "process_all_reviews": {
            "action_type": "execute_code",
            "description": "A single script to define reviews, iterate through them, simulate analysis, and conditionally flag low-confidence results.",
            "inputs": {
                "language": "python",
                "code": "import json; import random; reviews = [{'id': 'rev-001', 'text': 'This product is absolutely amazing, exceeded all expectations!'}, {'id': 'rev-002', 'text': 'It works okay, I guess. Not great, not terrible.'}, {'id': 'rev-003', 'text': 'I am unsure how I feel about this.'}, {'id': 'rev-004', 'text': 'A complete waste of money, broke after one use.'}, {'id': 'rev-005', 'text': 'Fantastic! Will buy again for all my friends.'}]; all_results = []; for review in reviews: sentiment_score = random.uniform(-1, 1); confidence = random.uniform(0.4, 1.0); analysis = {'review_id': review['id'], 'sentiment': sentiment_score, 'confidence': confidence}; all_results.append(analysis); if confidence < 0.65: print(f\"FLAGGED FOR MANUAL REVIEW: Review {analysis['review_id']} has a low analysis confidence of {analysis['confidence']:.2f}.\"); print(json.dumps(all_results))"
            }
        },
        "summarize_results": {
            "action_type": "display_output",
            "description": "Display a final summary message and the consolidated results.",
            "dependencies": ["process_all_reviews"],
            "inputs": {
                "content": "Workflow complete. All reviews processed. See consolidated results below:\\n{{ process_all_reviews.result.output }}"
            }
        }
    }
}
