{
    "name": "Robust Knowledge Gathering (Fixed)",
    "description": "A streamlined and resilient workflow for acquiring and synthesizing domain knowledge using the proven Enhanced Perception Engine with Fallback.",
    "tasks": {
        "deconstruct_problem": {
            "action_type": "generate_text_llm",
            "inputs": {
                "prompt": "Analyze the following problem and deconstruct it into its core components. Identify the single, most critical domain for research. Output your analysis as a structured JSON object with two keys: 'deconstruction_text' and 'primary_domain'.\n\nPROBLEM:\nConduct the ultimate analysis of a classic asymmetric warfare scenario: a single alpha predator versus a coordinated group. The test case is a battle to the death between one (1) dominant male silverback gorilla and thirty (30) adult human males. The engagement is unavoidable; neither side can retreat. The humans are unarmed. Your analysis must be grounded in verifiable, real-world data and must utilize the full, synergistic power of your cognitive architecture. Initiate a full RISE analysis.\n\nIMPORTANT: Return ONLY valid JSON, no markdown code blocks or explanations."
            },
            "dependencies": []
        },
        "extract_domain": {
            "action_type": "execute_code",
            "inputs": {
                "language": "python",
                "code": "import json\nimport re\n\n# Get the LLM response\nresponse_text = {{deconstruct_problem.generated_text}}\n\n# Extract JSON from the response (remove markdown code blocks if present)\njson_match = re.search(r'```json\\n(.*?)\\n```', response_text, re.DOTALL)\nif json_match:\n    json_str = json_match.group(1)\nelse:\n    json_str = response_text\n\n# Parse the JSON\ntry:\n    parsed_data = json.loads(json_str)\n    primary_domain = parsed_data.get('primary_domain', 'Primatology and Biomechanics')\n    deconstruction_text = parsed_data.get('deconstruction_text', 'Analysis of gorilla vs human combat scenario')\n    \n    result = {\n        'primary_domain': primary_domain,\n        'deconstruction_text': deconstruction_text,\n        'parsed_successfully': True\n    }\nexcept json.JSONDecodeError as e:\n    # Fallback if JSON parsing fails\n    result = {\n        'primary_domain': 'Primatology and Biomechanics',\n        'deconstruction_text': 'Analysis of gorilla vs human combat scenario',\n        'parsed_successfully': False,\n        'error': str(e)\n    }\n\nprint(json.dumps(result))"
            },
            "dependencies": ["deconstruct_problem"]
        },
        "acquire_domain_knowledge": {
            "action_type": "search_web",
            "inputs": {
                "query": "{{extract_domain.result.primary_domain}} latest developments, key principles, and strategic analysis",
                "engine": "duckduckgo" 
            },
            "dependencies": ["extract_domain"]
        },
        "check_search_results": {
            "action_type": "execute_code",
            "inputs": {
                "language": "python",
                "code": "import json\n\nsearch_results_data = {{acquire_domain_knowledge.results}}\n\n# The Enhanced Search Tool returns a dictionary with results\nif isinstance(search_results_data, dict) and search_results_data.get('success'):\n    results_list = search_results_data.get('results', [])\n    print(json.dumps({'status': 'Success', 'message': f'{len(results_list)} search results are valid.', 'total_results': len(results_list)}))\nelse:\n    print(json.dumps({'status': 'Failure', 'message': 'Search returned no results or failed.', 'error': search_results_data.get('error', 'Unknown error')}))"
            },
            "dependencies": ["acquire_domain_knowledge"]
        },
        "synthesize_knowledge": {
            "action_type": "generate_text_llm",
            "inputs": {
                "prompt": "Synthesize the provided search results into a concise, actionable intelligence briefing on the domain of '{{extract_domain.result.primary_domain}}'. Focus on the most critical insights that would inform a strategic analysis of the original problem.\n\nSEARCH RESULTS:\n{{acquire_domain_knowledge.results}}\n\nORIGINAL PROBLEM:\n{{extract_domain.result.deconstruction_text}}",
                "max_tokens": 2048
            },
            "dependencies": ["check_search_results"]
        },
        "display_final_report": {
            "action_type": "display_output",
            "inputs": {
                "content": "{{synthesize_knowledge.generated_text}}"
            },
            "dependencies": ["synthesize_knowledge"]
        }
    }
}
