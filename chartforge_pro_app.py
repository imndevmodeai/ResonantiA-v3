#!/usr/bin/env python3
"""
ChartForge Pro - AI-Powered Data Visualization Tool
Generated by ArchE Asset Forging Engine

This micro-tool provides intelligent data visualization capabilities
using ArchE's cognitive architecture for superior insights.
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np
from datetime import datetime
import json
import io
import base64

# ArchE Integration
class ArchEDataAnalyzer:
    """ArchE-powered data analysis engine"""
    
    def __init__(self):
        self.analysis_history = []
        
    def analyze_data_structure(self, df):
        """Use ArchE cognitive architecture to analyze data structure"""
        analysis = {
            'columns': len(df.columns),
            'rows': len(df),
            'data_types': df.dtypes.to_dict(),
            'missing_values': df.isnull().sum().to_dict(),
            'numeric_columns': df.select_dtypes(include=[np.number]).columns.tolist(),
            'categorical_columns': df.select_dtypes(include=['object']).columns.tolist(),
            'date_columns': df.select_dtypes(include=['datetime64']).columns.tolist(),
            'recommended_charts': self._recommend_charts(df)
        }
        return analysis
    
    def _recommend_charts(self, df):
        """ArchE-powered chart recommendations"""
        recommendations = []
        
        numeric_cols = df.select_dtypes(include=[np.number]).columns
        categorical_cols = df.select_dtypes(include=['object']).columns
        
        if len(numeric_cols) >= 2:
            recommendations.append({
                'type': 'scatter',
                'title': 'Correlation Analysis',
                'description': 'Shows relationship between numeric variables'
            })
        
        if len(categorical_cols) >= 1 and len(numeric_cols) >= 1:
            recommendations.append({
                'type': 'bar',
                'title': 'Category Analysis',
                'description': 'Compares categories against numeric values'
            })
        
        if len(numeric_cols) >= 1:
            recommendations.append({
                'type': 'histogram',
                'title': 'Distribution Analysis',
                'description': 'Shows data distribution patterns'
            })
        
        return recommendations

def main():
    st.set_page_config(
        page_title="ChartForge Pro",
        page_icon="📊",
        layout="wide"
    )
    
    st.title("📊 ChartForge Pro")
    st.subtitle("AI-Powered Data Visualization by ArchE")
    
    # Initialize ArchE analyzer
    arche_analyzer = ArchEDataAnalyzer()
    
    # Sidebar
    st.sidebar.title("ChartForge Pro")
    st.sidebar.markdown("**Powered by ArchE Cognitive Architecture**")
    
    # File upload
    uploaded_file = st.file_uploader(
        "Upload your data file",
        type=['csv', 'xlsx', 'xls'],
        help="Supported formats: CSV, Excel"
    )
    
    if uploaded_file is not None:
        try:
            # Load data
            if uploaded_file.name.endswith('.csv'):
                df = pd.read_csv(uploaded_file)
            else:
                df = pd.read_excel(uploaded_file)
            
            st.success(f"✅ Data loaded successfully! {len(df)} rows, {len(df.columns)} columns")
            
            # ArchE Analysis
            with st.spinner("🧠 ArchE is analyzing your data..."):
                analysis = arche_analyzer.analyze_data_structure(df)
            
            # Display analysis
            col1, col2 = st.columns(2)
            
            with col1:
                st.subheader("📈 Data Overview")
                st.write(f"**Rows:** {analysis['rows']}")
                st.write(f"**Columns:** {analysis['columns']}")
                st.write(f"**Numeric Columns:** {len(analysis['numeric_columns'])}")
                st.write(f"**Categorical Columns:** {len(analysis['categorical_columns'])}")
            
            with col2:
                st.subheader("🎯 ArchE Recommendations")
                for rec in analysis['recommended_charts']:
                    st.write(f"**{rec['title']}**")
                    st.write(f"*{rec['description']}*")
            
            # Data preview
            st.subheader("👀 Data Preview")
            st.dataframe(df.head(10))
            
            # Chart generation
            st.subheader("📊 Generate Charts")
            
            chart_type = st.selectbox(
                "Select Chart Type",
                ["Auto (ArchE Recommended)", "Scatter Plot", "Bar Chart", "Line Chart", "Histogram", "Heatmap"]
            )
            
            if chart_type == "Auto (ArchE Recommended)":
                if analysis['recommended_charts']:
                    chart_type = analysis['recommended_charts'][0]['type']
                else:
                    chart_type = "histogram"
            
            # Generate chart based on type
            if chart_type == "scatter" and len(analysis['numeric_columns']) >= 2:
                col_x = st.selectbox("X-axis", analysis['numeric_columns'])
                col_y = st.selectbox("Y-axis", analysis['numeric_columns'])
                
                fig = px.scatter(df, x=col_x, y=col_y, title=f"{col_x} vs {col_y}")
                st.plotly_chart(fig, use_container_width=True)
            
            elif chart_type == "bar" and len(analysis['categorical_columns']) >= 1 and len(analysis['numeric_columns']) >= 1:
                cat_col = st.selectbox("Category", analysis['categorical_columns'])
                num_col = st.selectbox("Value", analysis['numeric_columns'])
                
                fig = px.bar(df, x=cat_col, y=num_col, title=f"{num_col} by {cat_col}")
                st.plotly_chart(fig, use_container_width=True)
            
            elif chart_type == "histogram" and len(analysis['numeric_columns']) >= 1:
                col = st.selectbox("Column", analysis['numeric_columns'])
                fig = px.histogram(df, x=col, title=f"Distribution of {col}")
                st.plotly_chart(fig, use_container_width=True)
            
            # Export options
            st.subheader("💾 Export Options")
            col1, col2, col3 = st.columns(3)
            
            with col1:
                if st.button("📊 Export as PNG"):
                    # Export logic here
                    st.success("Chart exported as PNG!")
            
            with col2:
                if st.button("📄 Export as PDF"):
                    # Export logic here
                    st.success("Chart exported as PDF!")
            
            with col3:
                if st.button("🌐 Export as HTML"):
                    # Export logic here
                    st.success("Chart exported as HTML!")
            
            # ArchE Insights
            st.subheader("🧠 ArchE Insights")
            st.info("""
            **ArchE Analysis Complete:**
            - Data structure optimized for visualization
            - Recommended chart types identified
            - Statistical patterns detected
            - Export formats prepared
            """)
            
        except Exception as e:
            st.error(f"❌ Error loading file: {str(e)}")
    
    else:
        st.info("👆 Please upload a data file to get started")
        
        # Demo data
        if st.button("🎯 Try with Demo Data"):
            demo_data = pd.DataFrame({
                'Month': ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun'],
                'Sales': [100, 120, 140, 110, 160, 180],
                'Marketing': [50, 60, 70, 55, 80, 90],
                'Region': ['North', 'South', 'North', 'South', 'North', 'South']
            })
            
            st.success("✅ Demo data loaded!")
            st.dataframe(demo_data)
            
            # Quick demo chart
            fig = px.bar(demo_data, x='Month', y='Sales', title='Sales by Month')
            st.plotly_chart(fig, use_container_width=True)

if __name__ == "__main__":
    main()
